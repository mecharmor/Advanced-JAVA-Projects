<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:"Calibri Light";
	panose-1:2 15 3 2 2 2 4 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.3in;
	margin-bottom:.0001pt;
	text-indent:-.3in;
	line-height:107%;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;
	font-weight:normal;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.4in;
	margin-bottom:.0001pt;
	text-indent:-.4in;
	line-height:107%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;
	font-weight:normal;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	text-indent:-.5in;
	line-height:107%;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#1F3763;
	font-weight:normal;}
h4
	{mso-style-link:"Heading 4 Char";
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.6in;
	margin-bottom:.0001pt;
	text-indent:-.6in;
	line-height:107%;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;
	font-weight:normal;
	font-style:italic;}
h5
	{mso-style-link:"Heading 5 Char";
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.7in;
	margin-bottom:.0001pt;
	text-indent:-.7in;
	line-height:107%;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;
	font-weight:normal;}
h6
	{mso-style-link:"Heading 6 Char";
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.8in;
	margin-bottom:.0001pt;
	text-indent:-.8in;
	line-height:107%;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#1F3763;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-link:"Heading 7 Char";
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.9in;
	margin-bottom:.0001pt;
	text-indent:-.9in;
	line-height:107%;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#1F3763;
	font-style:italic;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{mso-style-link:"Heading 8 Char";
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:1.0in;
	margin-bottom:.0001pt;
	text-indent:-1.0in;
	line-height:107%;
	page-break-after:avoid;
	font-size:10.5pt;
	font-family:"Calibri Light",sans-serif;
	color:#272727;}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{mso-style-link:"Heading 9 Char";
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:1.1in;
	margin-bottom:.0001pt;
	text-indent:-1.1in;
	line-height:107%;
	page-break-after:avoid;
	font-size:10.5pt;
	font-family:"Calibri Light",sans-serif;
	color:#272727;
	font-style:italic;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:5.0pt;
	margin-left:0in;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:5.0pt;
	margin-left:11.0pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-link:"Header Char";
	margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-link:"Footer Char";
	margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
a:link, span.MsoHyperlink
	{color:#0563C1;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:#954F72;
	text-decoration:underline;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.5in;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoListParagraphCxSpFirst, li.MsoListParagraphCxSpFirst, div.MsoListParagraphCxSpFirst
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoListParagraphCxSpMiddle, li.MsoListParagraphCxSpMiddle, div.MsoListParagraphCxSpMiddle
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoListParagraphCxSpLast, li.MsoListParagraphCxSpLast, div.MsoListParagraphCxSpLast
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.5in;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
span.MsoBookTitle
	{letter-spacing:.25pt;
	font-weight:bold;
	font-style:italic;}
p.MsoTocHeading, li.MsoTocHeading, div.MsoTocHeading
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Calibri Light",sans-serif;
	color:#1F3763;}
span.Heading4Char
	{mso-style-name:"Heading 4 Char";
	mso-style-link:"Heading 4";
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;
	font-style:italic;}
span.Heading5Char
	{mso-style-name:"Heading 5 Char";
	mso-style-link:"Heading 5";
	font-family:"Calibri Light",sans-serif;
	color:#2F5496;}
span.Heading6Char
	{mso-style-name:"Heading 6 Char";
	mso-style-link:"Heading 6";
	font-family:"Calibri Light",sans-serif;
	color:#1F3763;}
span.Heading7Char
	{mso-style-name:"Heading 7 Char";
	mso-style-link:"Heading 7";
	font-family:"Calibri Light",sans-serif;
	color:#1F3763;
	font-style:italic;}
span.Heading8Char
	{mso-style-name:"Heading 8 Char";
	mso-style-link:"Heading 8";
	font-family:"Calibri Light",sans-serif;
	color:#272727;}
span.Heading9Char
	{mso-style-name:"Heading 9 Char";
	mso-style-link:"Heading 9";
	font-family:"Calibri Light",sans-serif;
	color:#272727;
	font-style:italic;}
span.HeaderChar
	{mso-style-name:"Header Char";
	mso-style-link:Header;}
span.FooterChar
	{mso-style-name:"Footer Char";
	mso-style-link:Footer;}
.MsoChpDefault
	{font-family:"Calibri",sans-serif;}
.MsoPapDefault
	{margin-bottom:8.0pt;
	line-height:107%;}
 /* Page Definitions */
 @page WordSection1
	{size:8.5in 11.0in;
	margin:.5in .5in .5in .5in;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US link="#0563C1" vlink="#954F72">

<div class=WordSection1>

<p class=MsoNormal align=center style='text-align:center'><span
class=MsoBookTitle><span style='font-size:24.0pt;line-height:107%'>&nbsp;</span></span></p>

<p class=MsoNormal align=center style='text-align:center'><span
class=MsoBookTitle><span style='font-size:24.0pt;line-height:107%'>&nbsp;</span></span></p>

<p class=MsoNormal align=center style='text-align:center'><span
class=MsoBookTitle><span style='font-size:24.0pt;line-height:107%'>&nbsp;</span></span></p>

<p class=MsoNormal align=center style='text-align:center'><span
class=MsoBookTitle><span style='font-size:24.0pt;line-height:107%'>&nbsp;</span></span></p>

<p class=MsoNormal align=center style='text-align:center'><span
class=MsoBookTitle><span style='font-size:24.0pt;line-height:107%'>&nbsp;</span></span></p>

<p class=MsoNormal align=center style='text-align:center'><span
class=MsoBookTitle><span style='font-size:24.0pt;line-height:107%'>Tank Game
&amp; Galactic Mail Documentation</span></span></p>

<p class=MsoNormal><span class=MsoBookTitle><span style='font-size:24.0pt;
line-height:107%'>&nbsp;</span></span></p>

<span class=MsoBookTitle><span style='font-size:24.0pt;line-height:107%;
font-family:"Calibri",sans-serif'><br clear=all style='page-break-before:always'>
</span></span>

<p class=MsoNormal><span class=MsoBookTitle><span style='font-size:24.0pt;
line-height:107%'>&nbsp;</span></span></p>

<p class=MsoTocHeading>Table of Contents</p>

<p class=MsoToc1><a href="#_Toc522827688">1<span style='color:windowtext;
text-decoration:none'>       </span>Introduction<span style='color:windowtext;
display:none;text-decoration:none'>. 2</span></a></p>

<p class=MsoToc2><a href="#_Toc522827689">1.1<span style='color:windowtext;
text-decoration:none'>        </span>Project Overview<span style='color:windowtext;
display:none;text-decoration:none'>.. 2</span></a></p>

<p class=MsoToc2><a href="#_Toc522827690">1.2<span style='color:windowtext;
text-decoration:none'>        </span>Introduction of the Tank Game<span
style='color:windowtext;display:none;text-decoration:none'>. 2</span></a></p>

<p class=MsoToc2><a href="#_Toc522827691">1.3<span style='color:windowtext;
text-decoration:none'>        </span>Introductin of the Second Game<span
style='color:windowtext;display:none;text-decoration:none'>. 2</span></a></p>

<p class=MsoToc1><a href="#_Toc522827692">2<span style='color:windowtext;
text-decoration:none'>       </span>Development Environment<span
style='color:windowtext;display:none;text-decoration:none'> 2</span></a></p>

<p class=MsoToc1><a href="#_Toc522827693">3<span style='color:windowtext;
text-decoration:none'>       </span>How to Build/Import your Project<span
style='color:windowtext;display:none;text-decoration:none'> 2</span></a></p>

<p class=MsoToc1><a href="#_Toc522827694">4<span style='color:windowtext;
text-decoration:none'>       </span>How to Run your Project<span
style='color:windowtext;display:none;text-decoration:none'> 3</span></a></p>

<p class=MsoToc1><a href="#_Toc522827695">5<span style='color:windowtext;
text-decoration:none'>       </span>Rules and Controls<span style='color:windowtext;
display:none;text-decoration:none'>. 5</span></a></p>

<p class=MsoToc1><a href="#_Toc522827696">6<span style='color:windowtext;
text-decoration:none'>       </span>Assumptions made when designing and
implementing Game(s)<span style='color:windowtext;display:none;text-decoration:
none'> 5</span></a></p>

<p class=MsoToc1><a href="#_Toc522827698">7<span style='color:windowtext;
text-decoration:none'>       </span>Tank Game Class Diagram<span
style='color:windowtext;display:none;text-decoration:none'>.. 6</span></a></p>

<p class=MsoToc1><a href="#_Toc522827699">8<span style='color:windowtext;
text-decoration:none'>       </span>Second Game Class Diagram<span
style='color:windowtext;display:none;text-decoration:none'>.. 7</span></a></p>

<p class=MsoToc1><a href="#_Toc522827699">9<span style='color:windowtext;
text-decoration:none'>       </span>Class Descriptions of all classes shared
among both Games<span style='color:windowtext;display:none;text-decoration:
none'>. 7</span></a></p>

<p class=MsoToc1><a href="#_Toc522827699">10<span style='color:windowtext;
text-decoration:none'>    </span>Class Descriptions of classes specific to Tank
Game<span style='color:windowtext;display:none;text-decoration:none'>. (9-11)</span></a></p>

<p class=MsoToc1><a href="#_Toc522827699">11<span style='color:windowtext;
text-decoration:none'>    </span>Class Descriptions of classes specific to
Second Game<span style='color:windowtext;display:none;text-decoration:none'>. (9-11)</span></a></p>

<p class=MsoToc1><a href="#_Toc522827699">12<span style='color:windowtext;
text-decoration:none'>    </span>Self-Reflection on development process during
the term project<span style='color:windowtext;display:none;text-decoration:
none'> 12</span></a></p>

<p class=MsoToc1><a href="#_Toc522827699">12<span style='color:windowtext;
text-decoration:none'>    </span>Project Conclusion<span style='color:windowtext;
display:none;text-decoration:none'>. (12-13)</span></a></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span class=MsoBookTitle><span style='font-size:24.0pt;
line-height:107%;font-weight:normal;font-style:normal'>&nbsp;</span></span></p>

<span class=MsoBookTitle><span style='font-size:24.0pt;line-height:107%;
font-family:"Calibri",sans-serif'><br clear=all style='page-break-before:always'>
</span></span>

<p class=MsoNormal><span class=MsoBookTitle><span style='font-size:24.0pt;
line-height:107%'>&nbsp;</span></span></p>

<h1><a name="_Toc522827688"><span class=MsoBookTitle><span style='letter-spacing:
0pt;font-weight:normal;font-style:normal'>1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><span class=MsoBookTitle><span style='letter-spacing:0pt;
font-weight:normal;font-style:normal'>Introduction</span></span></a></h1>

<h2><a name="_Toc522827689">1.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Project Overview</a></h2>

<p class=MsoNormal>The term project consisted of two games. The Tank Game, and
the Second Game (Galactic Mail) which are basic 2D arcade games that allow the player
to move around and attack or collect any given set of objects. The Tank Game is
multiplayer and allows two people to control their own tanks which they can use
to attack each other. The Galactic Mail Game is a single player game that is a
space ship which needs to deliver mail to the given set of moons, this game has
multiple levels and can store your high score.</p>

<h2><span class=MsoBookTitle><span style='letter-spacing:0pt;font-weight:normal;
font-style:normal'>1.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><span class=MsoBookTitle><span style='letter-spacing:0pt;
font-weight:normal;font-style:normal'>Introduction of the Tank Game</span></span></h2>

<p class=MsoNormal style='margin-left:.3in'>The Tank Game is a single leveled
game that can be controlled by two people. The Goal of the game is for one tank
to destroy the other. Extra Lives can be attained from running over red packs.
Tanks are confined to the size of the map but are free to move around within
those bounds. The map is generated by a .csv file which allows the game to
populate objects at specific locations given certain numbers used for
reflection during object generation.</p>

<h2>1.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Introduction of the Second Game (Galactic Mail)</h2>

<p class=MsoNormal style='margin-left:.3in'>Galactic Mail is a single player
game consisting of many levels that gradually get more challenging as the
player progresses. The player earns points when landing on moons and delivering
mail, but be careful because while on the moon you can lose points very quickly
for not launching off of the planet (spacebar). This game contains background
music and allows for the option to replay the game without having to relaunch
the .jar.</p>

<h1><a name="_Toc522827692">2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Development Environment</a></h1>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'>a.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Version
of Java Used: jre-10.0.2</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'>b.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>IDE
Used: IntelliJ IDEA 2018.2.3</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'>c.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Main
Java Libraries: awt, swing</p>

<h1><a name="_Toc522827693">3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>How to Build/Import your Project</a></h1>

<p class=MsoListParagraphCxSpFirst style='margin-left:.55in;text-indent:-.25in'><a
name="_Toc522827694">1)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>intelliJ IDE download link: </a><a href="https://www.jetbrains.com/idea/">https://www.jetbrains.com/idea/</a></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:.55in;text-indent:-.25in'>2)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>GitHub
desktop download link: <a href="https://desktop.github.com/">https://desktop.github.com/</a></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:.55in;text-indent:-.25in'>3)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Clone
Repository through GitHub desktop</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.05in;text-indent:-.25in'>a.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Navigate
to this link (if you have permissions to view):</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.55in;text-indent:-1.55in'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>i.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>(Tank Game Link) <a
href="https://github.com/csc413-01-fa18/csc413-tankgame-mecharmor">https://github.com/csc413-01-fa18/csc413-tankgame-mecharmor</a></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.05in;text-indent:-.25in'>b.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(Galactic
Mail Link) <a
href="https://github.com/csc413-01-fa18/csc413-secondgame-mecharmor">https://github.com/csc413-01-fa18/csc413-secondgame-mecharmor</a></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.05in;text-indent:-.25in'>c.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Click
Clone or download</p>

<p class=MsoListParagraphCxSpLast style='margin-left:1.05in;text-indent:-.25in'>d.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Choose
Open in Desktop (Photo illustration below)</p>

<p class=MsoNormal align=center style='text-align:center'><img border=0
width=523 height=174 id="Picture 1" src="test_files/image001.jpg"></p>

<p class=MsoListParagraphCxSpFirst style='margin-left:.55in;text-indent:-.25in'>4)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Once
your repository is cloned you can launch IntelliJ and import using existing
sources. </p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:.55in;text-indent:-.25in'>5)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>When
importing select: Create project from existing sources (photo illustration
below)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:.55in'><img border=0
width=488 height=125 id="Picture 4" src="test_files/image002.jpg"></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:.55in;text-indent:-.25in'>6)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Once
the project is imported you will need to edit configuration on the top right
of the screen<br>
<img border=0 width=313 height=123 id="Picture 3" src="test_files/image003.jpg"></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:.55in;text-indent:-.25in'>7)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Make
sure your Main class is located at: Game.Game<img border=0 width=623
height=123 id="Picture 6" src="test_files/image004.jpg"><br>
<br>
</p>

<p class=MsoListParagraphCxSpLast style='margin-left:.55in;text-indent:-.25in'>8)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>After
that you are ready to Build!</p>

<h1>4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>How to Run your Project</h1>

<p class=MsoNormal style='margin-left:.3in'>Running the project within
intelliJ:</p>

<p class=MsoListParagraphCxSpFirst style='margin-left:.55in;text-indent:-.25in'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Building
project into a jar:</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.05in;text-indent:-.25in'><span
style='color:#2F5496'>a.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Navigate to Build then select Build Artifacts, you will see a
popup in the center of the screen that prompts you to build. press build. The
project will build after a few seconds and the compiled jar will be located in
the directory: <span style='color:#2F5496'>csc413-secondgame-mecharmor\GalacticMail\out\artifacts\main_jar</span></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.05in'><img border=0
width=325 height=252 id="Picture 5" src="test_files/image005.jpg"></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.05in;text-indent:-.25in'>b.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Copy
the jar into the jar folder located in the GitHub project and replace the old
jar. You are ready to go!</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:.55in;text-indent:-.25in'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Running
the Jar</p>

<p class=MsoListParagraphCxSpLast style='margin-left:1.05in;text-indent:-.25in'>a.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>In
the fetched files from GitHub there is a file named Jar. Go inside that
folder and double click the main.jar. <span style='color:red'>Note: This jar
relies on the resources folder which is in the same directory as main.jar. If
you copy the jar outside the main directory, the game will not launch!</span></p>

<h1>5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Rules and Controls</h1>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-size:12.0pt;line-height:107%;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><b><span
style='font-size:12.0pt;line-height:107%'>Tank Game</span></b></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.05in;text-indent:-.25in'>b.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b>Rules</b>:</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.55in;text-indent:-1.55in'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>i.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Break Destructible Walls to get past obstacles. Collide with Red health
boxes to get an extra life. Objective of the game is to destroy the other tank
(Ex| Player 2).</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.05in;text-indent:-.25in'><b><span
style='font-size:14.0pt;line-height:107%'>c.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span style='font-size:14.0pt;line-height:107%'>Controls</span></b></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.55in;text-indent:-1.55in'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>i.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Player 1</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.05in;text-indent:-.25in'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>W-<b>Forwards</b>,
A-<b>LEFT</b>, S-<b>Backwards</b>, D-<b>Right</b>, E-<b>Shoot</b></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.55in;text-indent:-1.55in'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>ii.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Player 2</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.05in;text-indent:-.25in'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Up
Arrow<b>Forwards</b>, Left Arrow<b>Left</b>, Down Arrow<b>Backwards</b>, Right
Arrow<b>Right</b>, Enter Key-<b>Shoot</b></p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-size:12.0pt;line-height:107%;font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><b><span
style='font-size:12.0pt;line-height:107%'>Galactic Mail</span></b></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.05in;text-indent:-.25in'>d.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b>Rules</b>:</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.55in;text-indent:-1.55in'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>i.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Land on moons to gain points and deliver mail to the residents of that
planet. Green checkmarks denote which planets have had mail delivered to them. Once
mail is delivered to the next planet you will be taken to the next level. If
your score is high enough, you will get on the High-Score list! If an asteroid
hit you then the game is over (but you might still have a chance to make it
onto the high scores list). <span style='color:red'>Avoid Asteroids at all
costs!</span></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.05in;text-indent:-.25in'>e.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><span
style='font-size:14.0pt;line-height:107%'>Controls</span></b>:</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.55in;text-indent:-1.55in'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>i.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Player (Ship)</p>

<p class=MsoListParagraphCxSpLast style='margin-left:1.55in;text-indent:-1.55in'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>ii.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>W-<b>Forwards</b>, A-<b>LEFT</b>, D-<b>Right</b>, <b>Spacebar</b>Launch
from planet <u>while</u> docked</p>

<p class=MsoNormal><b>&nbsp;</b></p>

<h1><a name="_Toc522827695">6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Assumption Made</a> When designing and implementing Game(s)</h1>

<p class=MsoNormal style='margin-left:.3in'><b>Tank Game:</b></p>

<p class=MsoNormal style='margin-left:.3in'>When trying to plan for the general
structure of this program I knew I needed Interfaces: Collidable, Observable,
and Drawable which can be used to help identify which objects have functions
pertaining to their purpose.</p>

<p class=MsoNormal style='margin-left:.3in'>I had to write my program structure
down on roughly 13 pages, so I can plan properly and avoid any issues with
classes having low Cohesion and high Coupling. During the development of the
Tank Game, the main focuses were: getting objects to paint properly,
dynamically generating objects from a .csv file, managing collisions properly,
and optimizing program flow for best overall performance.</p>

<p class=MsoNormal style='margin-left:.3in'><b>Second Game:</b></p>

<p class=MsoNormal style='margin-left:.3in'>When designing the Galactic Mail
game. I knew the overall design was going to be the same but what became more
of a challenge is the next level scenarios where Game Objects would need to
be dealt with when a new map is generated. </p>

<p class=MsoNormal style='margin-left:.3in'>To meet the requirements of
delivering mail to moons I had to create an interface called Flag which
essentially would allow me to give certain game objects the ability to
throwFlag when a ship collides with them. This proved handy because inside my
GameManager.java class I was easily able to tally up all the thrown flags and
compare them with the total amount of flags that can be thrown for that
specific level.</p>

<p class=MsoNormal style='margin-left:.3in'>During the thought process for
designing the game. I decided I wanted to incorporate Animations and Music.
After a few drawings I managed to determine that there are two specific types
of animations pertaining to 2D games such as this. State Animations and
Overlay Animations. The state animations are simply a slight change in the
image for a specific game object (this is easy). The Overlay Animations are
more challenging because they usually have many components to them and need to
be lightweight, so they run smoothly. I noted down that I would need to create
an Animation class that <i>extends</i> Game Object and <i>implements</i> the
Drawable interface. This worked beautifully because I was able to use my
Animation Table class to invoke object creations of type Animation at any point
on the screen with any array of images at any speed with 1 line of code.</p>

<p class=MsoNormal style='margin-left:.3in'>I knew animations were going to be
challenging so instead of loading images of type .gif, I decided to create a
long strip of images and splice them based on a naming convention of:
NameOfPic_Frames. The frames would determine how much I would splice by.
Img.getWidth()/frames would be what I used to get subImages of those x values.</p>

<p class=MsoNormal style='margin-left:.3in'>Ex| Photo: Explosion_7</p>

<p class=MsoNormal align=center style='margin-left:.3in;text-align:center'><img
border=0 width=439 height=63 id="Picture 7" src="test_files/image006.png"></p>

<p class=MsoNormal style='margin-left:.3in'>My previous design with the tank
game contained many Tables that held my data. This was nice for performance,
but I noticed every time I added a new resource, I had to manually type the
path and file name to get the loading setup properly. I decided this would need
to be done in a dynamic way.</p>

<h1>7<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Tank Game Class Diagram</h1>

<p class=MsoNormal align=center style='margin-left:.3in;text-align:center'><img
border=0 width=339 height=429 id="Picture 9" src="test_files/image007.png"></p>

<h1>8<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Second Game Class Diagram (Galactic Mail)</h1>

<p class=MsoNormal align=center style='text-align:center'><img border=0
width=642 height=503 id="Picture 8" src="test_files/image008.png"></p>

<h1>9<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Class descriptions of all classes shared among both Games</h1>

<p class=MsoListParagraphCxSpFirst>Before I dig into the nitty gritty of what
each class does. I want to explain the <b>general flow</b> of both games.</p>

<p class=MsoListParagraphCxSpMiddle>Run Program <span style='font-family:Wingdings'>à</span>
Game Class initializes ALL tables <span style='font-family:Wingdings'>à</span>
Game Manager is created and map is generated via GameObjectGenerator <span
style='font-family:Wingdings'>à</span> GameObject children will invoke their
super() constructor that builds basic properties for itself <span
style='font-family:Wingdings'>à</span> The child GameObjects will publish
themselves to the Game Manager <span style='font-family:Wingdings'>à</span> The
Game Manager populates arrays in the following Lists inside:
CollissionManager, ObserverManager, and PaintManager<span
style='font-family:Wingdings'>à</span>The Game loop will continue to run and
invoke methods in GameManager <span style='font-family:Wingdings'>à</span> the
Invoked methods in GameManager will relay the call to one of the other managers
to execute their specific function. <span style='font-family:Wingdings'>à</span>
Game Loop continues until gameOver Boolean becomes true, inside Game.</p>

<p class=MsoListParagraphCxSpMiddle>&nbsp;</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Game</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>This class runs the main game loop, initializes all the Tables, and
Overrides the paintComponent method which paints all the Game Objects on the
screen</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>MapLoader aka (GameObjectGenerator) Name was changed for better
readability</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>This class generates objects given a specific csv file or when
requested to spawn an object and certain x, and y coordinates.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>PaintManager</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>This classs sole purpose is to paint all objects of type
Drawable to the screen. The paint method it contains loops though the known
Drawables and invokes their own paint method.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>GameObject {abstract}</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>This class is used as a way of standardizing classes that extend
this. It contains all common attributes shared among its child classes. This
helps reduce redundant code since every game object has common physical
properties such as: Coordinates, rectangle hitbox, move methods that control
movement of the object, and many more. </p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Methods inside GameObject can be Overwritten if a child class
needs a permutation of that ability. A good example of this is the
moveForward() method which moves specific quantities when called. The Asteroid
class in (Galactic Mail) needs to randomly assign speeds so I overwrote this
method for simplicity.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Collidable &lt;&lt;Interface&gt;&gt;</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>This interface is a guarantee that the following methods will be
implemented:</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Void handleCollision(Collidable obj);</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Used when two objects Rectangles collide.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Boolean isCollidable();</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Rectangle getBounds();</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Returns hit box for this specific instance of a Collidable</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Used to determine if the specific object is collidable or not.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Drawable &lt;&lt;Interface&gt;&gt;</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>This interface is a guarantee that the following methods will be
implemented:</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Void drawImage(Graphics g);</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Used to paint the implementing object onto the main graphic of
the game.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Boolean isDrawable();</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Used to determine if the specific object is Drawable or not.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Observable &lt;&lt;Interface&gt;&gt;</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>This interface is a guarantee that the following methods will be
implemented:</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Void update();</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Used for moving object during keypress events</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Void publish();</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>This method is used to push information to its child objects for
synchronization purposes.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Boolean GameOver();</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Triggers game over sequence that stops game loop.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Note: Observable objects can trigger game over state which stops
the game loop.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>ConfigTable (static class)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>This table is designed to live during the lifetime of the program</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Void Init()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Populates hash map with values used throughout the program</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Int getConfig(String key)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Returns a specific configuration contained within this objects
hashMap.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>SpriteTable (static class)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>This table is used to read all BufferedImages in a specific
folder and store them inside a hash map to be used throughout the program.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Void init()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Populates hash map with BufferedImages read from file at a
constant path.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>BufferedImage getBufferedImage(String key)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Returns a buffered image given a key (name of image) that is
stored in the hash map.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>GameObjectTable <span style='font-family:Wingdings'>à</span>
(GameObjectReflectionTable) name changed for clarity</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>This table contains a hash map with number keys that reference
specific names of GameObject children. This table is ONLY used in the MapLoader
(GameObjectGenerator) for reflection when abstract objects need to be
instantiated.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>String getObject(String key)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Returns a GameObject child class name given a specific number.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Note: Numbers were used for reflection because MapLoader
(GameObjectGenerator) loads from a csv file populated with numbers.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>TankControl <span style='font-family:Wingdings'>à</span> (GameController)
renamed to increase abstraction so ANY game object can be passed in</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>This class is used to connect ANY Game Object to a key listener.</p>

<p class=MsoListParagraphCxSpLast style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>This class implements many methods in KeyListener and is used to
invoke move methods inside ANY Game Object that is coupled with this class.</p>

<h1>10<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>Class
Descriptions of classes specific to Tank Game</h1>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Package</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Helpers</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>GameManager <i>(This class is not specific to the tank game but I
wanted to note its purpose)</i></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The game manager is used with strong coupling between itself and
instantiated GameObjects, this helps game objects publish themselves to the
game manager. (This caused low cohesion which looked like spaghetti code) this
was changed in the second game</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>GameObject</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Bullet (extends GameObject implements Collidable, Drawable)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Designed to simply move forward and destroy itself upon impact
with any object</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>DestructibleWall (extends GameObject implements Collidable,
Drawable)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>This class is designed to destroy itself once its health
reaches zero after so many bullet collisions.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>HealthBar (extends GameObject implements Drawable)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Used to keep track of health and display a red rectangle given a
certain amount of health</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><i>Used mainly as a child class of other Game Objects</i></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Lives (extends GameObject implements Drawable)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>This class is designed to draw a simple circle given a certain
offset. </p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><i>Used mainly as a child class of other Game Objects</i></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>LivesBoost (extends GameObject implements Drawable, Collidable)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>This class is designed to destroy itself upon impact with any
object</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Tank (extends GameObject implements Drawable, Collidable, and
Observable)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>This class is used as the main component of the game.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It has a series of child objects that determine its lifespan
(Healthbar, and Lives)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void handleCollision(Collidable obj)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>If bullet</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:3.0in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Lose health</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Else If LivesBoost</p>

<p class=MsoListParagraphCxSpLast style='margin-left:3.0in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Increase Array List of lives by 1.</p>

<h1>11<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>Class
Descriptions of classes specific to Second Game</h1>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Package</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>GameObject</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Flag &lt;&lt;Interface&gt;&gt;</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void throwFlag()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>This method is used to notify the Game Manager that a flag has
been thrown.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Animation (extends GameObject implements Drawable)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Given any set of coordinates, animation name, and duration (in
milliseconds). This class can iterate though an ArrayList with a timer to
display a new image thus animation.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Asteroid (extends GameObject implements Drawable, Collidable)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Used to move around in a random direction and destroy itself upon
collision with an instanceof Ship.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>MoonBase (extends GameObject implements Drawable, Collidable,
Flag)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>This class is mainly used to throw flags once it collides with an
instance of Ship.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Upon collision with an instance of Ship, this class will throw a
flag and change the state of its image so it displays a green checkmark</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Ship (extends GameObject implements Drawable, Collidable,
Observable)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>This class is a critical component to the program because it can
notify the Game Manager when the game is over and has many different actions
upon collision with specific Game Objects.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void launchRocket()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Runs a timer that programmatically moves the space ship forward
for a specific amount of time.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>The timer invokes the method: launchRocketHelper()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void launchRocketHelper()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Used to stop the timer once a specific amount of iterations is
met. </p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Keypress toggle methods are overwritten so the default object
image can be changed given a certain keypress</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Helpers</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Score <i>(used by HighScoresTable to manage score data)</i></p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>String getName()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Returns the name that is saved in this object</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Int getScore()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Returns the score that is saved in this object</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Manager</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Manager &lt;&lt;Interface&gt;&gt;</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void stop()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Used to forcefully stop all actions of the managers (used when
next level is loading)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>CollisionManager (implements Manager)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void checkCollisions()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Loops through all Collidable objects and determines if their
rectangles intersect</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Void throwFlag()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:3.0in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Increases flags thrown counter. (used by Game Manager to
determine when next level needs to be loaded)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Int getThrownFlags()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:3.0in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Returns the amount of flags that have been thrown</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Void syncCachedObjects()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:3.0in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Merges cached collidable objects to the main colidables
arraylist.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Void addCollidable(Collidable cb)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:3.0in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>Adds a colidable object to the collidablesCache arraylist to be
later merged by (syncCachedObjects()).</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span> GameManager (different from the Tank Games implementation
because it delegates tasks to the other managers instead of runs everything by
itself [high cohesion])</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void setGameOver(Boolean temp)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Sets game over status inside the observer manager class</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void updateObservers()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Triggers updateObservers method inside observerManager</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void addObservable(Observable obs)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>adds observable to observerManager</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>void addObserverControls(GameController gc)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>adds a game controller object to the observers control array
list.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Boolean getGameOver()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Returns the game over Boolean contained within observer manager</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void addDrawable(Drawable dr)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Adds drawable object in paintManager</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void paint(Graphics g)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Invokes the paint method in paintManager</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void throwFlag()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Invokes the throwFlag() method in collisionManager</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void addCollidable(Collidable cb)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Adds collidable object to collisionManager</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void checkCollisoins()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Invokes checkCollisions() in collisionManager</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Boolean allFlagsThrown()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Compares total flags in level with the amount of flags thrown
from collisionManager. Returns true if the level has been completed</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void syncCachedObjects()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Invokes the syncCachedObjects() method in the other managers</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void stop()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Invokes the stop() method in the other managers</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>ObserverManager (implements Manager)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void stop()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Iterates through all Observers and invokes their stop methods</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void updateObservers()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Iterates through all observables and checks if the game over
status has been thrown.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Invokes each observers update method</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>PaintManager (implements Manager)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void stop()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Iterates through all Drawables and invokes their sto methods</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void paint(Graphics g)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Loops through all drawables and invokes their drawImage method
and passes a reference to the main games graphics object.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void syncCachedObjects()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Merges all objects in drawablesCache with drawables arraylist</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Tables</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>AnimationTable</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void init()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Loops through all files in the directory resources/animations/
and populates the hashmap with arraylist of images split by the splitImage
method.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>ArrayList&lt;BufferedImage&gt; splitImage(BufferedImage img,
String name)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>This method parses the name string and determines how many frames
are in the buffered image.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>The getSubImage() method is called and pieces of the original
image are stored in an arraylist that will be returned after all the frames
have been added</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void playAnimation(int x, int y, String name, int
timeOfAnimationInMs)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Creates new instance of type Animation and adds it to the
drawable arraylist.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>AudioTable</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void init()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>This method reads all audio files in the path resources/sounds/
and populates a hash map of type AudioInputStream.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void playContinuously(String key)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Reads AudioInputStream from the audioTable hash map and converts
it into a clip object that is ran continuously</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void stopALLContinuous()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Iterates through all playing music and invokes its stop()
method.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void playOnce(String key)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Retrieves AudioInputStream object and plays that sound one time.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>HighScoresTable</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void init()</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Reads text file at path resources/highscores.txt and splits
each line with the : delimiter to store into an arraylist of scores of type
score.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>During file read, the lowestScore variable is set so lowest score
can be retrieved in O(1) constant time.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Boolean isHighScore(int checkScore)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Determines if the current score is higher than the lowest score.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Void insertNewHighScore(String insertName, int insertScore)</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Writes new high score to text file.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:2.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>String getHighScores()</p>

<p class=MsoListParagraphCxSpLast style='margin-left:2.5in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Iterates through all the high scores stored in the ArrayList and
concatenates it into one large string.</p>

<h1>12<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>Self-reflection
on Development process during the term project</h1>

<p class=MsoNormal style='margin-left:.3in;text-indent:.2in'>This project has
challenged me in many ways. The biggest challenge of all was admitting to
myself that I cannot think through the ENTIRE design process in my head and NOT
write anything down on paper. That was the biggest take away from this project.
Because before this term project, I would simply write code and not think
through EXACTLY how I wanted to design the structure of my program. I noticed
that with this term project I wrote much cleaner code than I have in the past
mainly for spending hours thinking through how I wanted to design my project.
Between my Tank Game and Second Game I had roughly 23 pages of notes used as a
reference for the design of my project. Not going to lie, Im tired. But this
class has taught me a great deal in terms of being an independent programmer
and attacking problems with a thinking first coding last mindset.</p>

<h1>13<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>Project
Conclusion</h1>

<p class=MsoNormal style='margin-left:.25in;text-indent:.05in'>Both games meet
the specified requirements of the projects and were designed in a way that is
dynamic and scalable if future changes are made. The Second game design was
much more dynamic than the tank game because I had more time to reflect on how
I originally designed things and how they could be modularized even more. ALL
my tables dynamically populate from files so hard coding is unnecessary. My
Game Object Generator class allows me to create any object at any time at any
place of the screen with one line of code. In addition, this class reads all
the csv files in my levels folder and can dynamically generate new levels
without the need to hard code my maps into my classes. I took this term project
as a challenge to modularize as much code as I could and pull ALL my resources
in a dynamic way so scalability and mod ability is very easy to achieve. The
level of abstraction I have been able to achieve is to the point where a new
csv file can be created in my levels folder and a new level will appear
within the game without ANY modification of code. </p>

</div>

</body>

</html>
